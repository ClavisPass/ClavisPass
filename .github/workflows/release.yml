name: Build & Release

on:
  push:
    tags:
      - "v*.*.*"

jobs:
  build-linux:
    runs-on: ubuntu-22.04
    env:
      TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
      TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install Linux dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libgtk-3-dev \
            libwebkit2gtk-4.1-dev \
            libwebkitgtk-6.0-dev \
            libjavascriptcoregtk-4.1-dev \
            libsoup-3.0-dev \
            libssl-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install dependencies
        run: npm install

      - name: Build Expo Web App for Tauri
        run: npm run web:build-tauri

      - name: Install Tauri CLI
        run: cargo install tauri-cli

      - name: Setup Rust & Tauri
        uses: tauri-apps/tauri-action@v0.4
        with:
          tauriScript: cargo tauri

      - name: Upload Linux binaries
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          files: |
            src-tauri/target/release/bundle/deb/*.deb
            src-tauri/target/release/bundle/rpm/*.rpm
            src-tauri/target/release/bundle/appimage/*

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux
          path: |
            src-tauri/target/release/bundle/appimage/*.AppImage

  build-windows:
    runs-on: windows-latest
    env:
      TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
      TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install dependencies
        run: npm install

      - name: Build Expo Web App for Tauri
        run: npm run web:build-tauri

      - name: Install Tauri CLI
        run: cargo install tauri-cli

      - name: Setup Rust & Tauri
        uses: tauri-apps/tauri-action@v0.4
        with:
          tauriScript: cargo tauri
          args: --target x86_64-pc-windows-msvc

      - name: Upload Windows binaries
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          files: |
            src-tauri/target/x86_64-pc-windows-msvc/release/bundle/msi/*.msi
            src-tauri/target/x86_64-pc-windows-msvc/release/bundle/nsis/*.exe

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows
          path: |
            src-tauri/target/x86_64-pc-windows-msvc/release/bundle/nsis/*.exe

  build-macos:
    runs-on: macos-latest
    env:
      TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
      TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install dependencies
        run: npm install

      - name: Build Expo Web App for Tauri
        run: npm run web:build-tauri

      - name: Install Tauri CLI
        run: cargo install tauri-cli

      - name: Setup Rust & Tauri
        uses: tauri-apps/tauri-action@v0.4
        with:
          tauriScript: cargo tauri

      - name: Upload macOS binaries
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          files: |
            src-tauri/target/release/bundle/dmg/*.dmg
            src-tauri/target/release/bundle/macos/*.zip

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos
          path: |
            src-tauri/target/release/bundle/dmg/*.dmg

  expo-ota-update:
    name: Expo OTA Update
    runs-on: ubuntu-latest
    environment: production
    env:
      EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: npm

      - name: Install dependencies
        run: npm install

      - name: Install EAS CLI globally
        run: npm install -g eas-cli@latest

      - name: Verify EAS authentication
        run: eas whoami
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}

      - name: Trigger Expo OTA Update
        run: eas update --branch production --message "Automated update from GitHub Actions for ${{ github.ref_name || github.sha }}"

  # build-android-apk:
  #     runs-on: ubuntu-latest
  #     env:
  #       EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
  #     steps:
  #       - name: Checkout repository
  #         uses: actions/checkout@v3
  #
  #       - name: Setup Node.js
  #         uses: actions/setup-node@v3
  #         with:
  #           node-version: 18
  #
  #       - name: Install dependencies
  #         run: npm install
  #
  #       - name: Install EAS CLI globally
  #         run: npm install -g eas-cli@latest
  #
  #       - name: Verify EAS authentication
  #         run: eas whoami
  #         env:
  #           EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
  #
  #       - name: Trigger Android build in Expo Cloud (non-interactive)
  #         id: eas_build
  #         run: |
  #           # The --json flag outputs build details to stdout.
  #           # We capture this output and save it to a file.
  #           eas build --platform android --profile production --non-interactive --wait --json > build-info.json
  #           cat build-info.json # For debugging: print the content of the file
  #
  #       - name: Get APK download URL
  #         id: get_apk_url
  #         run: |
  #           # Parse the build URL from the build-info.json file
  #           APK_URL=$(jq -r '.[0].artifacts.buildUrl' build-info.json) # Note the '.[0]' for array access
  #           echo "Discovered APK URL: $APK_URL"
  #           echo "APK_URL=$APK_URL" >> $GITHUB_ENV # Set as an environment variable for subsequent steps
  #
  #       - name: Download APK
  #         run: |
  #           curl -L -o ClavisPass.apk "$APK_URL"
  #           ls -l ClavisPass.apk # Verify the file exists and its size
  #
  #       - name: Upload APK artifact
  #         uses: actions/upload-artifact@v4
  #         with:
  #           name: android
  #           path: ClavisPass.apk

  build-updater:
    runs-on: ubuntu-24.04
    needs: [build-linux, build-windows, build-macos, expo-ota-update] # build-android-apk
    env:
      TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
      TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download release artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Setup Rust & Tauri
        run: cargo install tauri-cli

      - name: Set version without 'v'
        run: echo "VERSION_NO_V=${GITHUB_REF_NAME#v}" >> $GITHUB_ENV

      - name: Sign installers and generate updater.json
        run: |
          VERSION="${{ env.VERSION_NO_V }}"
          RELEASE_URL="https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}"

          export PATH="$HOME/.cargo/bin:$PATH"

          # Use specific filenames as they are created by the build jobs and downloaded by actions/download-artifact
          SIGN_WINDOWS=$(cargo tauri signer sign \
            --private-key "${TAURI_SIGNING_PRIVATE_KEY}" \
            --password "${TAURI_SIGNING_PRIVATE_KEY_PASSWORD}" \
            "artifacts/windows/ClavisPass_${VERSION}_x64-setup.exe" | awk '/^Public signature:/{getline; print}')

          SIGN_LINUX=$(cargo tauri signer sign \
            --private-key "${TAURI_SIGNING_PRIVATE_KEY}" \
            --password "${TAURI_SIGNING_PRIVATE_KEY_PASSWORD}" \
            "artifacts/linux/ClavisPass_${VERSION}_amd64.AppImage" | awk '/^Public signature:/{getline; print}')

          SIGN_MACOS=$(cargo tauri signer sign \
            --private-key "${TAURI_SIGNING_PRIVATE_KEY}" \
            --password "${TAURI_SIGNING_PRIVATE_KEY_PASSWORD}" \
            "artifacts/macos/ClavisPass_${VERSION}_aarch64.dmg" | awk '/^Public signature:/{getline; print}')

          echo "{
            \"version\": \"${VERSION}\",
            \"notes\": \"New Version with Bugfixes\",
            \"pub_date\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\",
            \"platforms\": {
              \"windows-x86_64\": {
                \"signature\": \"${SIGN_WINDOWS}\",
                \"url\": \"${RELEASE_URL}/ClavisPass_${VERSION}_x64-setup.exe\"
              },
              \"linux-x86_64\": {
                \"signature\": \"${SIGN_LINUX}\",
                \"url\": \"${RELEASE_URL}/ClavisPass_${VERSION}_amd64.AppImage\"
              },
              \"darwin-aarch64\": {
                \"signature\": \"${SIGN_MACOS}\",
                \"url\": \"${RELEASE_URL}/ClavisPass_${VERSION}_aarch64.dmg\"
              }
            }
          }" > updater.json

      - name: Sign updater.json
        run: |
          cargo tauri signer sign \
            --private-key "${TAURI_SIGNING_PRIVATE_KEY}" \
            --password "${TAURI_SIGNING_PRIVATE_KEY_PASSWORD}" \
            updater.json > updater.json.sig

      - name: Upload updater.json and signature to release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: |
            ClavisPass Version ${{ github.ref_name }}

            This release includes the latest builds of ClavisPass for Windows, macOS, Linux and Android.

            All platform-specific installers are available in the release assets.
            The updater will automatically download the correct version for your system.
            Thank you for using ClavisPass!
          files: |
            updater.json
            updater.json.sig
          # artifacts/android/ClavisPass.apk

name: Build & Release

on:
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: write

jobs:
  # 1) Alle Plattformen parallel bauen und Artefakte bereitstellen
  build-artifacts:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [ubuntu-22.04, windows-latest, macos-latest]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install dependencies
        run: npm ci

      - name: Setup Rust & Tauri
        uses: tauri-apps/tauri-action@v0.4
        with:
          # Windows-Target nur auf Windows-Runner
          args: ${{ matrix.os == 'windows-latest' && '--target x86_64-pc-windows-msvc' || '' }}

      - name: Build Tauri App
        run: npm run tauri:build  # oder dein Script

      - name: Upload artefacts
        uses: actions/upload-artifact@v3
        with:
          name: bundle-${{ matrix.os }}
          path: src-tauri/target/${{ matrix.os == 'windows-latest' && 'x86_64-pc-windows-msvc/' || 'release/' }}/bundle/**/*

  # 2) Update-JSON und Signing erst danach â€“ braucht alle drie Artefakte
  update-updater:
    needs: build-artifacts
    runs-on: ubuntu-22.04
    env:
      TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
      TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # 3) Lade alle gebauten Artefakte herunter
      - name: Download Linux artefacts
        uses: actions/download-artifact@v3
        with:
          name: bundle-ubuntu-22.04
          path: bundle/linux

      - name: Download Windows artefacts
        uses: actions/download-artifact@v3
        with:
          name: bundle-windows-latest
          path: bundle/windows

      - name: Download macOS artefacts
        uses: actions/download-artifact@v3
        with:
          name: bundle-macos-latest
          path: bundle/macos

      - name: Set version without 'v'
        run: echo "VERSION_NO_V=${GITHUB_REF_NAME#v}" >> $GITHUB_ENV

      - name: Generate updater.json
        run: |
          cat > updater.json <<EOF
          {
            "version": "${{ env.VERSION_NO_V }}",
            "notes": "Automated release",
            "pub_date": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "platforms": {
              "windows-x86_64": {
                "url": "https://.../ClavisPass_${{ env.VERSION_NO_V }}_x64-setup.exe"
              },
              "linux-x86_64": {
                "url": "https://.../clavis-pass_${{ env.VERSION_NO_V }}_amd64.AppImage"
              },
              "darwin-aarch64": {
                "url": "https://.../ClavisPass_${{ env.VERSION_NO_V }}_aarch64.dmg"
              }
            }
          }
          EOF

      - name: Sign updater.json
        run: |
          cargo install tauri-cli
          export PATH="$HOME/.cargo/bin:$PATH"
          cargo tauri signer sign \
            --private-key "${TAURI_PRIVATE_KEY}" \
            --password "${TAURI_KEY_PASSWORD}" \
            updater.json

      - name: Publish updater.json (+ .sig) to gh-pages
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "actions@github.com"
          git clone --depth=1 --branch=gh-pages https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }} gh-pages
          cp updater.json updater.json.sig gh-pages/
          cd gh-pages
          git add updater.json updater.json.sig
          git commit -m "Update updater.json for ${{ github.ref_name }}" || echo "No changes"
          git push